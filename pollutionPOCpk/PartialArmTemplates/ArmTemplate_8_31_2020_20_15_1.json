{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pollutionPOCpk"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAggregatePollutionData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pollutionDataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"filterDateValue": {
										"value": "@concat('''',formatDateTime(subtractFromTime(string(utcnow()), pipeline().parameters.LastNumberOfDays_PipeLine,'Day'),'yyyy-MM-dd'),'''')",
										"type": "Expression"
									},
									"lastNumberOfDays": {
										"value": "@pipeline().parameters.LastNumberOfDays_PipeLine",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"LastNumberOfDays_PipeLine": {
						"type": "int",
						"defaultValue": 7
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pollutionDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExtractPollutionData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputPollutionDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "OutputPollutionRawDataSet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@concat(pipeline().parameters.pollutionFileName, '_' , formatDateTime(utcnow(), 'MM-dd-yyyy_hh-mm-ss') , '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"pollutionFileName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputPollutionDataSet')]",
				"[concat(variables('factoryId'), '/datasets/OutputPollutionRawDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowSurrogateKey",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowSurrogateKey",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-08-19T08:13:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowSurrogateKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PollutionData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkedServiceStorageBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "PollutionRawData",
						"container": "pollutiondata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputPollutionDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkedServiceHttpServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/resource/3b01bcb8-0b14-4abf-b6f2-c1bfd384ba69?api-key=579b464db66ec23bdd000001db6f8d31eff0408478fc83710b8c735f&format=csv&offset=100&limit=2000&filters=New%20Delhi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputLinkedServiceHttpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputPollutionRawDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "outputLinkedServiceBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('PollutionRawData', '/' , formatDateTime(utcnow(), 'yyyy') , '/' , formatDateTime(utcnow(), 'MM') , '/' , formatDateTime(utcnow(), 'MM-dd-yyyy'))",
							"type": "Expression"
						},
						"container": "pollutiondata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsStorageBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkedServiceStorageBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsStorageOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkedServiceStorageBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AggregatePollutionData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "outputLinkedServiceBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "aggregateoutput",
						"container": "pollutiondata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "station",
						"type": "String"
					},
					{
						"name": "last_update",
						"type": "String"
					},
					{
						"name": "pollutant_id",
						"type": "String"
					},
					{
						"name": "pollutant_min",
						"type": "String"
					},
					{
						"name": "pollutant_max",
						"type": "String"
					},
					{
						"name": "pollutant_avg",
						"type": "String"
					},
					{
						"name": "pollutant_unit",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputLinkedServiceHttpServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "https://api.data.gov.in",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "https://cktkeyvault04Aug.vault.azure.net/"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsStorageBlob",
								"type": "DatasetReference"
							},
							"name": "sourceBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsStorageOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tempname as string,\n\t\t{ department} as short,\n\t\t{ city} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['emp.csv'],\n\tpartitionBy('hash', 1)) ~> sourceBlob\nsourceBlob keyGenerate(output(EmpID as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tEmpID,\n\t\t{ EmpName} = empname,\n\t\t{ City} = { city},\n\t\tDepartment = { department}\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['outputSurrogate.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsStorageBlob')]",
				"[concat(variables('factoryId'), '/datasets/dsStorageOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pollutionDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PollutionData",
								"type": "DatasetReference"
							},
							"name": "pollutionDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_AggregatePollutionData",
								"type": "DatasetReference"
							},
							"name": "sinkAggregateData"
						}
					],
					"transformations": [
						{
							"name": "lastUpdatedDataStream"
						},
						{
							"name": "filteredData"
						},
						{
							"name": "aggregatePollutionData"
						}
					],
					"script": "parameters{\n\tfilterDateValue as string,\n\tlastNumberOfDays as integer\n}\nsource(output(\n\t\tid as short,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as integer,\n\t\tpollutant_max as integer,\n\t\tpollutant_avg as integer,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['PollutionRawData/**'],\n\tpartitionBy('hash', 1)) ~> pollutionDataSource\npollutionDataSource derive(LastUpdatedColumn = toDate(last_update, 'dd-MM-yyyy'),\n\tpartitionBy('hash', 1)) ~> lastUpdatedDataStream\nlastUpdatedDataStream filter(LastUpdatedColumn >= toDate($filterDateValue,'yyyy-MM-dd')) ~> filteredData\nfilteredData aggregate(groupBy(LastUpdatedColumn,\n\t\tstation,\n\t\tpollutant_id,\n\t\tcity,\n\t\tstate),\n\tpollutant_min = min(pollutant_min),\n\t\tpollutant_max = max(pollutant_max),\n\t\tpollutant_avg = avg(pollutant_avg),\n\tpartitionBy('hash', 1)) ~> aggregatePollutionData\naggregatePollutionData sink(input(\n\t\tid as string,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as string,\n\t\tpollutant_max as string,\n\t\tpollutant_avg as string,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\temptyLinesAsHeader: 1,\n\tpartitionFileNames:['aggregateData'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkAggregateData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_PollutionData')]",
				"[concat(variables('factoryId'), '/datasets/ds_AggregatePollutionData')]"
			]
		}
	]
}