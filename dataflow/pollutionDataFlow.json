{
	"name": "pollutionDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PollutionData",
						"type": "DatasetReference"
					},
					"name": "pollutionDataSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AggregatePollutionData",
						"type": "DatasetReference"
					},
					"name": "sinkAggregateData"
				}
			],
			"transformations": [
				{
					"name": "lastUpdatedDataStream"
				},
				{
					"name": "filteredData"
				},
				{
					"name": "aggregatePollutionData"
				}
			],
			"script": "parameters{\n\tfilterDateValue as string (\"31-08-2020\"),\n\tlastNumberOfDays as integer\n}\nsource(output(\n\t\tid as short,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as integer,\n\t\tpollutant_max as integer,\n\t\tpollutant_avg as integer,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['PollutionRawData/**'],\n\tpartitionBy('hash', 1)) ~> pollutionDataSource\npollutionDataSource derive(LastUpdatedColumn = toDate(last_update, 'dd-MM-yyyy'),\n\tpartitionBy('hash', 1)) ~> lastUpdatedDataStream\nlastUpdatedDataStream filter(LastUpdatedColumn >= toDate($filterDateValue,'yyyy-MM-dd')) ~> filteredData\nfilteredData aggregate(groupBy(LastUpdatedColumn,\n\t\tstation,\n\t\tpollutant_id,\n\t\tcity,\n\t\tstate),\n\tpollutant_min = min(pollutant_min),\n\t\tpollutant_max = max(pollutant_max),\n\t\tpollutant_avg = avg(pollutant_avg),\n\tpartitionBy('hash', 1)) ~> aggregatePollutionData\naggregatePollutionData sink(input(\n\t\tid as string,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as string,\n\t\tpollutant_max as string,\n\t\tpollutant_avg as string,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\temptyLinesAsHeader: 1,\n\tpartitionFileNames:['aggregateData'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkAggregateData"
		}
	}
}